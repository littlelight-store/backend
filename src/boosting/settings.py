"""
Django settings for boosting project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import logging
import logging.config
import os
import sys

import sentry_sdk
from celery.schedules import crontab
from dependency_injector import containers
from dependency_injector.containers import DynamicContainer
from easy_thumbnails.conf import Settings as thumbnail_settings
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "kv0*9fvxngem0gc887x)s-57=c=dbv+4r!7x#tkjbtvlhl6^r0"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ.get("DEBUG") == "True" else False

ENVIRONMENT = os.environ.get("config__ENVIRONMENT", None)

IS_PROD = ENVIRONMENT == 'prod'

EMAIL_USE_TLS = True
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = "LittleLight.store <no-reply@littlelight.store>"

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "frontend",
    "nginx",
    "littlelight.store",
    "www.littlelight.store",
    "api.littlelight.store",
    "destiny2.littlelight.store",
    "division2.littlelight.store",
    "api-destiny2.littlelight.store",
    "api-division2.littlelight.store",
    # docker-compose up
    "destiny-backend",
    "division-backend",
    "stage.littlelight.store",
    # docker stack
    "backend",
    "138.68.68.21",
]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # 3d party
    "rest_framework",
    "rest_framework.authtoken",
    "drfpasswordless",
    "corsheaders",
    "adminsortable2",
    "prettyjson",
    "django_object_actions",
    "simple_history",
    "ckeditor",
    'django_celery_results',
    'django_transitions',  # this is only needed to find the templates.
    "channels",

    # my apps
    "services.apps.ServicesConfig",
    "profiles.apps.ProfilesConfig",
    "orders.apps.OrdersConfig",
    "reviews.apps.ReviewsConfig",
    "pages.apps.PagesConfig",

]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "boosting.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates"), ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "boosting.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ.get("DATABASE", "boosting"),
        "USER": os.environ.get("POSTGRES_USER", "boosting"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "sumes241oefsarasdea342"),
        "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
        "PORT": "5432",
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators
AUTH_USER_MODEL = "profiles.User"
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", },
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", },
]

PASSWORDLESS_AUTH = {
    "PASSWORDLESS_AUTH_TYPES": ["EMAIL"],
    "PASSWORDLESS_EMAIL_NOREPLY_ADDRESS": DEFAULT_FROM_EMAIL,
    "PASSWORDLESS_EMAIL_TOKEN_HTML_TEMPLATE_NAME": "profiles/new_authorization.html",
    "PASSWORDLESS_CONTEXT_PROCESSORS": ["template_context.base_url", ],
    "PASSWORDLESS_EMAIL_SUBJECT": "Dashboard access token",
}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/api/destiny2/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "..", "static_in_env", "static_root")

CKEDITOR_BASEPATH = STATIC_URL + "ckeditor/ckeditor/"
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline'],
            ['Link', 'Unlink'],
            {
                'name': 'paragraph',
                'items': [
                    'BulletedList', '-',
                    'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', '-'
                                                                                    'Format'
                ]
            },
            ['RemoveFormat', 'Source'],
        ]
    }
}

LOGLEVEL = os.environ.get('DJANGO_LOG_LEVEL', 'INFO')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': LOGLEVEL,
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'level': LOGLEVEL,
            'propagate': False,
        },
    }
}

LOGGING_CONFIG = None

logging.config.dictConfig(LOGGING)

MEDIA_URL = "/api/destiny2/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "..", "static_in_env", "media_root")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static_in_pro", "static"),
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ]
}

CORS_ORIGIN_WHITELIST = ["http://localhost:3000", "http://127.0.0.1:3000"]
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_CREDENTIALS = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

BUNGIE_API_KEY = os.environ.get("BUNGIE_API_KEY", "840cc4a823fe4f1ab3480fb034c3f650")
BUNGIE_API_ENDPOINT = os.environ.get(
    "BUNGIE_API_ENDPOINT", "https://www.bungie.net/Platform"
)

SENTRY_TOKEN = os.environ.get("SENTRY_TOKEN", "")

REDIS_HOST = os.environ.get("REDIS_HOST", "localhost")

CELERY_BROKER_URL = f"redis://{REDIS_HOST}:6379"
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "Asia/Yekaterinburg"
CELERY_BEAT_SCHEDULE = {
}

SITE_ID = os.environ.get("SITE_ID", 1)

ASGI_APPLICATION = 'boosting.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(REDIS_HOST, 6379)],
        },
    },
}

FIREBASE_SEVER_KEY = os.environ.get(
    "FIREBASE_SERVER_KEY",
    "AAAAGHA_gfA:APA91bGOY0SMJmcaxga0jWS_-5iFwkBr3aIJ1nteF1HGcLocX_47"
    "h9LahZsTKbTAUGEBnJaFyt-_bcCG6vb"
    "3sPu71x0AN_yWyUejG0rUgIcLOPHneKx23AzIWWY0DzA34osjfw_F75kV"
)

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

if ENVIRONMENT == "stage":
    CACHES = {"default": {"BACKEND": "django.core.cache.backends.dummy.DummyCache"}}

if ENVIRONMENT == "prod":
    PAYPAL_VERIFY_URL = "https://ipnpb.paypal.com/cgi-bin/webscr"
    BASE_URL = "https://littlelight.store"

elif ENVIRONMENT == "stage":
    BASE_URL = "https://stage.littlelight.store"
    PAYPAL_VERIFY_URL = "https://ipnpb.sandbox.paypal.com/cgi-bin/webscr"
else:
    BASE_URL = "http://localhost:8000"
    PAYPAL_VERIFY_URL = "https://ipnpb.sandbox.paypal.com/cgi-bin/webscr"

BOT_TOKEN = os.environ.get(
    "BOT_TOKEN", "bot614454597:AAGzT5VuUHnUwV3brMAeexJTX_th9QqQacA"
)

BASE_AUTH_URL = os.getenv("BASE_AUTH_URL", "https://littlelight.store")

TESTING = "test" in sys.argv

if TESTING:
    PASSWORD_HASHERS = [
        "django.contrib.auth.hashers.MD5PasswordHasher",
    ]

try:
    from .test_settings import *
except ImportError:
    pass

if not DEBUG:
    sentry_sdk.init(
        dsn=f"https://{SENTRY_TOKEN}@sentry.io/1390435",
        integrations=[DjangoIntegration()],
        environment=ENVIRONMENT,
    )
    # SESSION_ENGINE = "django.contrib.sessions.backends.cache"
    # SESSION_CACHE_ALIAS = "default"
else:
    CELERY_TASK_ALWAYS_EAGER = True
    CACHES = {"default": {"BACKEND": "django.core.cache.backends.dummy.DummyCache"}}
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        }
    }

DISCORD_BOT_TOKEN = os.environ.get("DISCORD_BOT_TOKEN", 'NzM2NjQ1NzUxMjkxMTE3NzI4.Xxx00Q.P-sYlZWWF8kKO6zbMXwbpYH43Jw')

TRUSTPILOT_BCC = os.environ.get(
    'TRUSTPILOT_BCC',
    'littlelight.store+18c17bb215@invite.trustpilot.com'
)
